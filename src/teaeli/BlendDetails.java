/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package teaeli;

import classes.Blend;
import classes.DBConnection;
import classes.Ingredient;
import classes.Validation;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Thisara Salgado
 */
   

public class BlendDetails extends javax.swing.JFrame {

    /**
     * Creates new form UpdateProduct
     */
    
     private Ingredient ingredient1;
     private Blend blend;
     private BlendDetails blendDetails;
     
     DBConnection dbConn = new DBConnection();
     
    public BlendDetails() {
        
        initComponents();
        
        //Changing table headers to bold
        ingTable.getTableHeader().setFont(new Font("Segoe UI Semibold", Font.PLAIN, 14));
        flavourTable.getTableHeader().setFont(new Font("Segoe UI Semibold", Font.PLAIN, 14));
        
        setResizable(false);
        
        Ingredient ingredient = new Ingredient();
        ingredient.initIngCombo(ingCombo);
        
        Ingredient base = new Ingredient();
        base.initIngCombo(baseCombo);
        
        Ingredient flavour = new Ingredient();
        flavour.initFlavourCombo(flavoursCombo);
        
        //Validation on Ing percentage, when key released
        ingPerTxt.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                String per = ingPerTxt.getText();
                if (per.length() > 0) {
                    if (!(new Validation().isFloat(per))) {
                        JOptionPane.showMessageDialog(ingPerTxt, "Ingredient percentage must be a valid number!", "Error", JOptionPane.WARNING_MESSAGE);
                        ingPerTxt.setText(per.substring(0, per.length() - 1));
                    } else if (Float.parseFloat(per) < 0) {
                        JOptionPane.showMessageDialog(ingPerTxt, "Ingredient percentage cannot be less than 0!", "Error", JOptionPane.WARNING_MESSAGE);
                        ingPerTxt.setText(per.substring(0, per.length() - 1));
                    }
                }
            }

            public void keyTyped(KeyEvent e) {
            }

            public void keyPressed(KeyEvent e) {
            }
        });
        
        ingredient1 = new Ingredient();
        blend = new Blend();
        //blendCodeTxt.setText("Thisara");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cancelBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        blendNameTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        flavoursPerTxt = new javax.swing.JTextField();
        ingPerTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ingPerAddBtn = new javax.swing.JButton();
        flavoursPerAddBtn = new javax.swing.JButton();
        blendAddnewBtn = new javax.swing.JButton();
        blendCodeTxt = new javax.swing.JTextField();
        ingCombo = new javax.swing.JComboBox();
        flavoursCombo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ingTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        flavourTable = new javax.swing.JTable();
        baseCombo = new javax.swing.JComboBox();
        category = new javax.swing.JLabel();
        blendCategoryCombo = new javax.swing.JComboBox();
        blendUpdateBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        updateRadioBtn = new javax.swing.JRadioButton();
        addnewRadioBtn = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Blend Details ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14))); // NOI18N

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Flavours");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Ingredients");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Blend Name");

        blendNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blendNameTxtActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Blend Code");

        flavoursPerTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flavoursPerTxtActionPerformed(evt);
            }
        });

        jLabel7.setText("%");

        jLabel6.setText("%");

        ingPerAddBtn.setText("Add");
        ingPerAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingPerAddBtnActionPerformed(evt);
            }
        });

        flavoursPerAddBtn.setText("Add");
        flavoursPerAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flavoursPerAddBtnActionPerformed(evt);
            }
        });

        blendAddnewBtn.setText("Add new");
        blendAddnewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blendAddnewBtnActionPerformed(evt);
            }
        });

        blendCodeTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blendCodeTxtActionPerformed(evt);
            }
        });

        ingCombo.setEditable(true);
        ingCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ingCombo.setSelectedIndex(-1);
        ingCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingComboActionPerformed(evt);
            }
        });

        flavoursCombo.setEditable(true);
        flavoursCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        flavoursCombo.setSelectedIndex(-1);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Base Composition");

        ingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Ingredient", "Precentage (%)"
            }
        ));
        jScrollPane3.setViewportView(ingTable);

        flavourTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Flavour", "Precentage (%)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(flavourTable);

        baseCombo.setEditable(true);
        baseCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        baseCombo.setSelectedIndex(-1);
        baseCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseComboActionPerformed(evt);
            }
        });

        category.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        category.setText("Category");

        blendCategoryCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Artisian Special V2", "Artisian Special V26", "Black", "Green Tea", "Organic Black", "Organic Green", "Organic Infusion", "Infusions", "Iced Teas" }));
        blendCategoryCombo.setToolTipText("");
        blendCategoryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blendCategoryComboActionPerformed(evt);
            }
        });

        blendUpdateBtn.setText("Update");
        blendUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blendUpdateBtnActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("Select Your Choice");

        updateRadioBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        updateRadioBtn.setText("Update");
        updateRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRadioBtnActionPerformed(evt);
            }
        });

        addnewRadioBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addnewRadioBtn.setText("Add New");
        addnewRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addnewRadioBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cancelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blendUpdateBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blendAddnewBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(updateRadioBtn))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(ingPerTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ingPerAddBtn))
                                            .addComponent(addnewRadioBtn))))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(flavoursCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(flavoursPerTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(22, 22, 22)
                                        .addComponent(flavoursPerAddBtn))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(blendCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 268, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel1)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(category)
                                        .addGap(18, 18, 18)
                                        .addComponent(blendCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(baseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(blendNameTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(updateRadioBtn)
                    .addComponent(addnewRadioBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blendCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blendNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blendCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(baseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ingPerTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(ingPerAddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flavoursCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flavoursPerTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(flavoursPerAddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blendAddnewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blendUpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void blendNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blendNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blendNameTxtActionPerformed

    private void flavoursPerTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flavoursPerTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flavoursPerTxtActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
           this.setVisible(false);
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void blendCodeTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blendCodeTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blendCodeTxtActionPerformed

    private void ingComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ingComboActionPerformed

    private void baseComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_baseComboActionPerformed

    private void blendCategoryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blendCategoryComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blendCategoryComboActionPerformed

    private void ingPerAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingPerAddBtnActionPerformed
        if (ingCombo.getSelectedItem().equals("")){
            //System.out.println("ing combo");
            JOptionPane.showMessageDialog(ingCombo, "Please select a ingredient to add.", "Error", JOptionPane.WARNING_MESSAGE);
            ingCombo.requestFocus();      
    }                                            
        else {
            String ingName = (String) ingCombo.getSelectedItem();
            float ingPer = Float.parseFloat(ingPerTxt.getText());
            boolean isNew = true;
            //Search if the ingredient is already added
            int rowCount = ingTable.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                if (ingName.equals(ingTable.getValueAt(i, 0))) {
                    isNew = false;
                    break;
                }
            }
            if (isNew) {
                if(ingPer>100){
                    JOptionPane.showMessageDialog(ingPerTxt, "Please enter valid percentage to add.", "Error", JOptionPane.WARNING_MESSAGE);
                    ingPerTxt.setText("");
                    ingPerTxt.requestFocus();
                }else{
                    List<List<String>> res = ingredient1.getIngDataByIngName(ingName);
                    //System.out.println(res);
                    Vector newRow = new Vector();
                    newRow.addElement(res.get(0).get(1));
                    newRow.addElement(ingPer);

                    DefaultTableModel model = (DefaultTableModel) ingTable.getModel();
                    model.addRow(newRow);
                }
            }
            
            ingPerTxt.setText("");
            ingCombo.setSelectedIndex(-1);
            ingCombo.requestFocus();
        }
    }//GEN-LAST:event_ingPerAddBtnActionPerformed
    
    
    private void flavoursPerAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flavoursPerAddBtnActionPerformed
        if (flavoursCombo.getSelectedItem().equals("")){
            JOptionPane.showMessageDialog(flavoursCombo, "Please select a flavour to add.", "Error", JOptionPane.WARNING_MESSAGE);
            flavoursCombo.requestFocus();
    }                                                
        else {
            String flavourName = (String) flavoursCombo.getSelectedItem();
            float ingPer = Float.parseFloat(flavoursPerTxt.getText());
            boolean isNew = true;
            //Search if the ingredient is already added
            int rowCount = flavourTable.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                if (flavourName.equals(flavourTable.getValueAt(i, 0))) {
                    isNew = false;
                    break;
                }
            }
            if (isNew) {
                if(ingPer>100){
                    JOptionPane.showMessageDialog(ingPerTxt, "Please enter valid percentage to add.", "Error", JOptionPane.WARNING_MESSAGE);
                    ingPerTxt.setText("");
                    ingPerTxt.requestFocus();
                }else{
                    List<List<String>> res = ingredient1.getIngDataByIngName(flavourName);
                    //System.out.println(res);
                    Vector newRow = new Vector();
                    newRow.addElement(res.get(0).get(1));
                    newRow.addElement(ingPer);

                    DefaultTableModel model = (DefaultTableModel) flavourTable.getModel();
                    model.addRow(newRow);
                }
            }
            
            flavoursPerTxt.setText("");
            flavoursCombo.setSelectedIndex(-1);
            flavoursCombo.requestFocus();
        }
    }//GEN-LAST:event_flavoursPerAddBtnActionPerformed
    
    String blendID, blendName, blendCategory, base;//Decalration for add new blend data
    
    private void blendAddnewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blendAddnewBtnActionPerformed
        blendID = blendCodeTxt.getText();
        blendName = blendNameTxt.getText();
        blendCategory = blendCategoryCombo.getSelectedItem().toString();
        base = baseCombo.getSelectedItem().toString();
        
        int ID,Name;
        ID = blend.checkExistingBlendID(blendID);
        Name = blend.checkExistingBlendName(blendName);
        if(blendID.isEmpty() || blendName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Any feild cannot be empty");
        }
        else{
            if(ID!=0){
                JOptionPane.showMessageDialog(this, "This ID is already Exsist");
                blendCodeTxt.setText("");
                blendCodeTxt.requestFocus();
            }else{
                if(Name!=0){
                    JOptionPane.showMessageDialog(this, "This Name is already Exsist");
                    blendNameTxt.setText("");
                    blendNameTxt.requestFocus();
                }else{
                        float ingPerCount = 0;
                        float flavPerCount = 0;
                        int ingCount = ingTable.getRowCount();
                        int flavCount = flavourTable.getRowCount();
                        int recCount = ingCount+flavCount;

                        if(ingCount==0){
                            JOptionPane.showMessageDialog(this, "Ingredients Should be added!");
                        }
                        else{
                            if(flavCount==0){
                                for(int i=0; i < ingCount; i++){
                                    float initPer = Float.parseFloat(ingTable.getValueAt(i, 1).toString()); ;
                                    ingPerCount = ingPerCount + initPer;
                                }

                                if(ingPerCount <= 0 || ingPerCount>=100){
                                    JOptionPane.showMessageDialog(this, "Invalid percentage");

                                }else{
                                    int ret = blend.addNewBlend(blendID, blendName, base, blendCategory);

                                    ArrayList <Integer> ingID = new ArrayList<>();
                                    for(int i=0;i<ingCount;i++){
                                        Blend a = new Blend();
                                        ingID.add(a.getIngIDRecByIngName(ingTable.getValueAt(i, 0).toString()));
                                    }

                                    int x = 0;
                                    for(int i =0; i<ingCount ; i++){
                                        int a = ingID.get(i);
                                        double b = Double.parseDouble(ingTable.getValueAt(i, 1).toString());
                                        String query1 = "INSERT INTO recipie (blendID, ingID, ingPercent, type) VALUES ('"+ blendID +"','"+ a +"','"+ b +"',0)";
                                        x = dbConn.updateResult(query1);
                                    }

                                    if(x==1){
                                        JOptionPane.showMessageDialog(null, "New Blend Succesfully Added");
                                        this.dispose();
                                    }else{
                                        JOptionPane.showMessageDialog(null, "Error!, Data not Saved");
                                    }
                                }

                            }else{
                                //addedboth ing and flavour data to recipie
                                for(int i=0; i < ingCount; i++){
                                    float initPer = Float.parseFloat(ingTable.getValueAt(i, 1).toString()); ;
                                    ingPerCount = ingPerCount + initPer;
                                }

                                for(int i=0; i <flavCount;i++){
                                    float initPer = Float.parseFloat(flavourTable.getValueAt(i, 1).toString()); ;
                                    flavPerCount = flavPerCount + initPer;
                                }

                                if(ingPerCount <= 0 || ingPerCount>=100){
                                    JOptionPane.showMessageDialog(this, "Invalid percentage");

                                }else if(flavPerCount <= 0 || flavPerCount>=100){
                                     JOptionPane.showMessageDialog(this, "Invalid percentage");
                                }else{
                                    int ret = blend.addNewBlend(blendID, blendName, base, blendCategory);

                                    ArrayList <Integer> ingID = new ArrayList<>();
                                    ArrayList <Integer> flavourID = new ArrayList<>();
                                    for(int i=0;i<ingCount;i++){
                                        Blend a = new Blend();
                                    
                                        ingID.add(a.getIngIDRecByIngName(ingTable.getValueAt(i, 0).toString()));
                                    }

                                for(int i=0;i<flavCount;i++){
                                    Blend a = new Blend();
                                //ingID.add(Integer.parseInt(addNewBlendIngTbl.getValueAt(i, 0).toString()));
                                    flavourID.add(a.getIngIDRecByIngName(flavourTable.getValueAt(i, 0).toString()));
                                }
                            int x = 0;
                            int y = 0;
                            for(int i =0; i<ingCount ; i++){
                               int a = ingID.get(i);
                               double b = Double.parseDouble(ingTable.getValueAt(i, 1).toString());
                               String query1 = "INSERT INTO recipie (blendID, ingID, ingPercent, type) VALUES ('"+ blendID +"','"+ a +"','"+ b +"',0)";
                               x = dbConn.updateResult(query1);

                            }

                            for(int j =0; j<flavCount ; j++){
                               int c = flavourID.get(j);
                               double d = Double.parseDouble(flavourTable.getValueAt(j, 1).toString());
                               String query2 = "INSERT INTO recipie (blendID, ingID, ingPercent, type) VALUES ('"+ blendID +"','"+ c +"','"+ d +"',1)";
                               y = dbConn.updateResult(query2);

                            }

                            if(x==1 && y==1){
                                   JOptionPane.showMessageDialog(null, "New Blend Succesfully Added");
                                   this.dispose();


                                   //this.setVisible(true);

                               }else{
                                   JOptionPane.showMessageDialog(null, "Error!, Data not Saved");
                                 }

                                }
                            }
                    }
        
        }
        }
        }
    }//GEN-LAST:event_blendAddnewBtnActionPerformed

    private void updateRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRadioBtnActionPerformed
        
        if(updateRadioBtn.isSelected()){
            blendUpdateBtn.setEnabled(true);
            ingPerAddBtn.setEnabled(false);
            flavoursPerAddBtn.setEnabled(false);
            addnewRadioBtn.setEnabled(false);
        }else{
            blendUpdateBtn.setEnabled(false);
            addnewRadioBtn.setEnabled(true);
        }    
    }//GEN-LAST:event_updateRadioBtnActionPerformed

    private void addnewRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addnewRadioBtnActionPerformed
        if(addnewRadioBtn.isSelected()){
            blendAddnewBtn.setEnabled(true);
            ingPerAddBtn.setEnabled(true);
            flavoursPerAddBtn.setEnabled(true);
            blendCodeTxt.setEditable(true);
            blendNameTxt.setEditable(true);
            updateRadioBtn.setEnabled(false);
        }else{
            blendAddnewBtn.setEnabled(false);
            ingPerAddBtn.setEnabled(false);
            flavoursPerAddBtn.setEnabled(false);
            blendCodeTxt.setEditable(false);
            blendNameTxt.setEditable(false);
            updateRadioBtn.setEnabled(true);
        }
    }//GEN-LAST:event_addnewRadioBtnActionPerformed

    private void blendUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blendUpdateBtnActionPerformed
        blendID = blendCodeTxt.getText();
        blendName = blendNameTxt.getText();
        blendCategory = blendCategoryCombo.getSelectedItem().toString();
        base = baseCombo.getSelectedItem().toString();
        
        float ingPerCount = 0;
        float flavPerCount = 0;
        int ingCount = ingTable.getRowCount();
        int flavCount = flavourTable.getRowCount();
        int recCount = ingCount+flavCount;
        
        if(flavCount==0){
            for(int i=0; i < ingCount; i++){
                float initPer = Float.parseFloat(ingTable.getValueAt(i, 1).toString()); ;
                ingPerCount = ingPerCount + initPer;
            }

            if(ingPerCount <= 0 || ingPerCount>=100){
                JOptionPane.showMessageDialog(this, "Invalid percentage");

            }else{
                int ret = blend.updateBlend(blendID, blendName, base, blendCategory);

                ArrayList <Integer> ingID = new ArrayList<>();
                for(int i=0;i<ingCount;i++){
                Blend a = new Blend();
                ingID.add(a.getIngIDRecByIngName(ingTable.getValueAt(i, 0).toString()));
            }

            int x = 0;
            for(int i =0; i<ingCount ; i++){
                int a = ingID.get(i);
                double b = Double.parseDouble(ingTable.getValueAt(i, 1).toString());
                String query1 = "UPDATE recipie SET ingID = '" + a + "',ingPercent = '" + b + "' WHERE blendID = '" + blendID + "'  ";
                x = dbConn.updateResult(query1);
            }

            if(x==1){
                JOptionPane.showMessageDialog(null, "Blend Succesfully Updated");
                this.dispose();
            }else{
                JOptionPane.showMessageDialog(null, "Error!, Update Not Completed");
            }
        }

    }   else if(ingCount>0 && flavCount>0){
            //addedboth ing and flavour data to recipie
            for(int i=0; i < ingCount; i++){
                float initPer = Float.parseFloat(ingTable.getValueAt(i, 1).toString()); ;
                ingPerCount = ingPerCount + initPer;
            }

            for(int i=0; i <flavCount;i++){
                float initPer = Float.parseFloat(flavourTable.getValueAt(i, 1).toString()); ;
                flavPerCount = flavPerCount + initPer;
            }

            if(ingPerCount <= 0 || ingPerCount>=100){
                JOptionPane.showMessageDialog(this, "Invalid percentage");

            }else if(flavPerCount <= 0 || flavPerCount>=100){
                JOptionPane.showMessageDialog(this, "Invalid percentage");
            }else{
                int ret = blend.updateBlend(blendID, blendName, base, blendCategory);

                ArrayList <Integer> ingID = new ArrayList<>();
                ArrayList <Integer> flavourID = new ArrayList<>();
                for(int i=0;i<ingCount;i++){
                    Blend a = new Blend();
                                    
                    ingID.add(a.getIngIDRecByIngName(ingTable.getValueAt(i, 0).toString()));
                }

                for(int i=0;i<flavCount;i++){
                    Blend a = new Blend();
                    //ingID.add(Integer.parseInt(addNewBlendIngTbl.getValueAt(i, 0).toString()));
                    flavourID.add(a.getIngIDRecByIngName(flavourTable.getValueAt(i, 0).toString()));
                }
                int x = 0;
                int y = 0;
                for(int i =0; i<ingCount ; i++){
                    int a = ingID.get(i);
                    double b = Double.parseDouble(ingTable.getValueAt(i, 1).toString());
                    String query1 = "UPDATE recipie SET ingID = '" + a + "',ingPercent = '" + b + "' WHERE blendID = '" + blendID + "' AND type=0 ";
                    x = dbConn.updateResult(query1);

                }

                for(int j =0; j<flavCount ; j++){
                    int c = flavourID.get(j);
                    double d = Double.parseDouble(flavourTable.getValueAt(j, 1).toString());
                    String query2 = "UPDATE recipie SET ingID = '" + c + "',ingPercent = '" + d + "' WHERE blendID = '" + blendID + "' AND type=1  ";
                    y = dbConn.updateResult(query2);

                }

                if(x==1 && y==1){
                    JOptionPane.showMessageDialog(null, "Blend Updated Succesfully");
                    this.dispose();


                                   //this.setVisible(true);

                }else{
                    JOptionPane.showMessageDialog(null, "Error!, Update Not Completed");
                }

            }
        }
    }//GEN-LAST:event_blendUpdateBtnActionPerformed
        
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlendDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlendDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlendDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlendDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlendDetails().setVisible(true);
            }
        });
    }
    
        
	

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton addnewRadioBtn;
    public javax.swing.JComboBox baseCombo;
    public javax.swing.JButton blendAddnewBtn;
    public javax.swing.JComboBox blendCategoryCombo;
    public javax.swing.JTextField blendCodeTxt;
    public javax.swing.JTextField blendNameTxt;
    public javax.swing.JButton blendUpdateBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel category;
    public javax.swing.JTable flavourTable;
    public javax.swing.JComboBox flavoursCombo;
    public javax.swing.JButton flavoursPerAddBtn;
    public javax.swing.JTextField flavoursPerTxt;
    public javax.swing.JComboBox ingCombo;
    public javax.swing.JButton ingPerAddBtn;
    public javax.swing.JTextField ingPerTxt;
    public javax.swing.JTable ingTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JRadioButton updateRadioBtn;
    // End of variables declaration//GEN-END:variables

    void identifyBlend(String blendID) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private String getBlendNameByBlendID(String blendID) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
